precision lowp float;
precision lowp sampler2D;

attribute vec3 vertexPosition;
attribute vec2 texCoord;
attribute vec3 vertexNormal;

// per instance attributes
attribute vec2 instanceCoord;
attribute vec3 rootPosition;

varying vec3 cameraNormal;
varying vec3 cameraLightDirection;

uniform sampler2D rotations;
uniform sampler2D offsets;

uniform mat4 projection;
uniform mat4 view;

uniform vec3 size;
uniform vec3 middleTranslation;

vec4 quat_mul(vec4 q1, vec4 q2) {
	return vec4(
		q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
		q1.w * q2.w - dot(q1.xyz, q2.xyz)
	);
}

vec3 rotate_vector(vec3 v, vec4 r) {
	vec4 r_c = r * vec4(-1, -1, -1, 1);
	return quat_mul(r, quat_mul(vec4(v, 0), r_c)).xyz;
}

void main()
{
    vec4 rotation = texture2D(rotations, instanceCoord);

    vec3 offset = texture2D(offsets, instanceCoord).xyz;

    vec3 position = rootPosition + offset;

    vec3 worldVertexPosition = rotate_vector(vertexPosition * size + middleTranslation, rotation) + position;

    gl_Position = projection * view * vec4(worldVertexPosition, 1);

    cameraLightDirection = -(view * vec4(worldVertexPosition, 1)).xyz;
    cameraNormal = (view * vec4(rotate_vector(vertexNormal, rotation), 0)).xyz;
}